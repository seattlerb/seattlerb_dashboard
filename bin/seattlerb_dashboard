#!/usr/bin/env ruby -ws

$v ||= false
$f ||= false
$r ||= false

require 'rubygems'
require 'yaml'
require 'seattlerb_projects'

def color val, type = :test
  return unless val

  h = {
       "passed" => "#9F9",
       true     => "#9F9",
       "failed" => "#F99",
       false    => "#66F",
       "n/a"    => "#ccc",
       nil      => "#ccc",
       "warn"   => "#FF6",
      }

  first = second = 0
  a, b, c = %w(passed warn failed)

  case type
  when :test, :rel then
    c = h[val]
    return c if c
    raise "unknown type"
  when :flay then
    first, second = 250, 1000
  when :flog then
    first, second = 15, 20
  when :dcov then
    first, second = 50, 80
    a, c = c, a
  else
    raise "unknown type"
  end

  n = Float(val)
  if n <= first then
    h[a]
  elsif n <= second then
    h[b]
  else
    h[c]
  end
end

old_comma, $, = $,, ', '

total_passed = total_failed = 0

seattlerb = SeattlerbProjects.new
projs     = seattlerb.projects.flatten
status    = Hash.new { |h,k| h[k] = Hash.new { |h2,k2| h2[k2] = "n/a" } }
versions  = Dir.chdir(File.expand_path("~/.multiruby/install")) { Dir["*"].sort}

code = {
  "n/a" => "o",
  nil   => "o",
  true  => "T",
  false => "F",
}

release = {
  "n/a" => "o",
  nil   => "o",
  true  => "Y",
  false => "N",
}

seattlerb.chdir_src

up_to_date = {}

format = "%-#{projs.map { |s| s.size }.max}s :%s: %s: %8s : %8s : %8s"
puts "Versions = #{versions.flatten.join " "}"
puts format % %w[Project rel versions flog flay dcov]
puts "-" * 78

dir = ARGV.shift || File.expand_path("~/Sites/dashboard")

Dir.mkdir dir unless File.exist? dir

format = "%-#{projs.map { |s| s.size }.max}s : %s : %s : %8.2f : %8.2f : %8.2f"

$cache_stale = false
def cache_against_dir_mtimes cache_path, dir
  return unless File.directory? dir
  Dir.chdir dir do
    cache_mtime = File.mtime(cache_path) rescue Time.at(0)
    dir_mtime = Dir["{lib,test}/**/*"].map { |f| File.mtime f if File.exist? f }.compact.max

    if $cache_stale || dir_mtime.nil? || cache_mtime < dir_mtime then
      $cache_stale = !$f
      data = yield

      File.open cache_path, 'w' do |f|
        YAML.dump data, f
      end

      data
    else
      YAML.load_file cache_path
    end
  end
end

projs.each do |proj|
  warn proj if $v
  next if proj =~ /^rubyforge/ # HACK

  proj_dir = case proj
        when /^rubyforge/ then
          File.expand_path("~/Work/svn/codeforpeople/rubyforge/trunk")
        else
          "#{proj}/dev"
        end

  next unless File.directory? proj_dir

  unless File.exist? File.join(proj_dir, "Rakefile") then
    warn "No rakefile: #{proj}"
  end

  ENV['VERSIONS'] = versions.join(':')

  data = cache_against_dir_mtimes "#{dir}/#{proj}.yaml", proj_dir do
    dirs = Dir["{lib,test}"].join(" ")
    dirs = "." if dirs.empty?
    {
      :test => `rake -qt clean multi 2>&1`,
      :flog => `flog -s -q -c #{dirs} | tail -1`[/\d+(\.\d+)?/].to_f,
      :flay => `flay -s #{dirs} | head -1`[/\d+(\.\d+)?/].to_f,
      :dcov => `rake -s dcov 2> /dev/null`[/(\d+(?:\.\d+)?)% documented/, 1].to_f,
    }
  end

  run = data[:test]
  passed = run[/^Passed: .*/]
  failed = run[/^Failed: .*/]

  passed.split(/[:,] /)[1..-1].each do |version|
    status[proj][version] = true
    total_passed += 1
  end unless passed.nil?

  failed.split(/[:,] /)[1..-1].each do |version|
    status[proj][version] = false
    total_failed += 1
  end unless failed.nil?

  results = status[proj]

  row = versions.map { |version| code[results[version]] }

  up_to_date[proj] = seattlerb.check_project(proj)
  results[:flog] = data[:flog] == 0 ? nil : data[:flog]
  results[:flay] = data[:flay] == 0 ? nil : data[:flay]
  results[:dcov] = data[:dcov]

  puts format % [proj, release[up_to_date[proj]],
                 row.join(" "),
                 data[:flog], data[:flay], data[:dcov]]
end

css = <<-EOM
*         { padding: 0; margin: 0; }
table     { margin: 1em auto; padding: 0; border-spacing: 0; }
th, td    { text-align: right; font-size:0.7em; width: 1em;}
th        { font-weight: normal; }
p         { text-align: center; }
tr#top th { vertical-align: bottom; text-align: left; height: 7em; }
.rot      { -webkit-transform: rotate(-90deg); -moz-transform: rotate(-90deg);
            -webkit-transform-origin: bottom;  -moz-transform-origin: bottom;
            position:absolute;
            margin-top: -6em;
            margin-left: -4.5em;
            width: 10em;
            line-height: 0em; }
EOM

puts
puts "passed: #{total_passed} failed: #{total_failed}"

$, = old_comma

exit if $r

require 'tagz'
include Tagz

Tagz.html_mode!

File.open "#{dir}/index.html", 'w' do |f|
  f.puts tagz {
    nbsp = Tagz.raw "&nbsp;"

    Tagz.raw %(<!D\OCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">) +
    html_ {
      head_ {
        title_ { "Project Status Report #{Time.now.strftime("%Y-%m-%d")}"}
        style_ Tagz.raw(css), :type=>"text/css"
      }
      body_ {
        table_ {
          tr_(:id => :top) {
            td_ {
              table_(:style => "border: 1px solid black; padding: 2px;") {
                tr_ { td_ "Packages:"; td_ projs.size }
                tr_ { td_ "Releases:"; td_ Dir["*/[0-9]*"].size }
                tr_ { td_ "Commits:";  td_ `p4 counter change` }
              }
            }
            th_ nbsp
            th_ { div_ "released\?", :class => :rot }
            th_ nbsp
            versions.each do |v|
              th_ { div_ v, :class => :rot }
            end
            th_ nbsp
            th_ { div_ "flog/meth", :class => :rot }
            th_ nbsp
            th_ { div_ "flay", :class => :rot }
            th_ nbsp
            th_ { div_ "dcov", :class => :rot }
          }
          projs.each do |proj|
            results = status[proj]
            tr_ {
              th_ {
                a_(proj, :href => "#{proj}.yaml")
              }

              td_ nbsp

              td_("", :style => "background: #{color(up_to_date[proj], :rel)}")

              td_ nbsp

              versions.each do |version|
                r = results[version] || "failed"
                r = "passed" if r == true
                td_("", :style => "background: #{color(r)}")
              end

              td_ nbsp
              td_(:style => "background: #{color(results[:flog], :flog)}") {
                Tagz.h "%.2f" % results[:flog] if results[:flog]
              }

              td_ nbsp
              td_(:style => "background: #{color(results[:flay], :flay)}") {
                Tagz.h "%.2f" % results[:flay] if results[:flay]
              }

              td_ nbsp
              td_(:style => "background: #{color(results[:dcov], :dcov)}") {
                Tagz.h "%.2f" % results[:dcov] if results[:dcov]
              }
            }
          end
        }
      }
    }
  }
end
