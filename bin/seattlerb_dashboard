#!/usr/bin/env ruby -ws

require 'rubygems'
require 'tagz'
require 'seattlerb_projects'

old_comma, $, = $,, ', '

def check_project project
  Dir.chdir project do
    ver = Dir["[0-9]*"].sort_by { |name| name.split(/\./).map { |n| n.to_i } }
    if ver.empty? then
      nil
    else
      ! system "diff -rq #{ver.last} dev | grep -q differ$"
    end
  end
end

total_passed = total_failed = 0

seattlerb = SeattlerbProjects.new
projs     = seattlerb.projects.flatten
status    = Hash.new { |h,k| h[k] = Hash.new { |h2,k2| h2[k2] = "n/a" } }
versions  = Dir.chdir(File.expand_path("~/.multiruby/install")) { Dir["*"].sort}

seattlerb.chdir_src

color = {
  "passed" => "#9F9",
  true     => "#9F9",
  "failed" => "#F99",
  false    => "#F99",
  "n/a"    => "#ccc",
  nil      => "#ccc",
}

code = {
  "n/a" => "o",
  nil   => "o",
  true  => "T",
  false => "F",
}

puts "Project: #{versions.flatten}"

dir = ARGV.shift || File.expand_path("~/Sites/dashboard")

Dir.mkdir dir unless File.exist? dir

format = "%-#{projs.map { |s| s.size }.max}s : %s : %s"

$cache_stale = false
def cache_against_dir_mtimes cache_path, dir
  Dir.chdir dir do
    cache_mtime = File.mtime(cache_path) rescue Time.at(0)
    dir_mtime = Dir["**"].map { |f| File.mtime f if File.exist? f }.compact.max

    if $cache_stale || cache_mtime < dir_mtime then
      $cache_stale = true
      data = yield

      File.open cache_path, 'w' do |f|
        f.write data
      end

      data
    else
      File.read cache_path
    end
  end
end

projs.each do |proj|
  next if proj =~ /rubyforge/ # HACK

  proj_dir = case proj
        when /rubyforge/ then
          File.expand_path("~/Work/svn/codeforpeople/rubyforge/trunk")
        else
          "#{proj}/dev"
        end

  ENV['VERSIONS'] = versions.join(':')

  run = cache_against_dir_mtimes "#{dir}/#{proj}.txt", proj_dir do
    `rake -q clean multi 2>&1`
  end

  passed = run[/^Passed: .*/]
  failed = run[/^Failed: .*/]

  passed.split(/[:,] /)[1..-1].each do |version|
    status[proj][version] = true
    total_passed += 1
  end unless passed.nil?

  failed.split(/[:,] /)[1..-1].each do |version|
    status[proj][version] = false
    total_failed += 1
  end unless failed.nil?

  results = status[proj]

  row = versions.map { |version| code[results[version]] }

  up_to_date = code[check_project(proj)]

  puts format % [proj, up_to_date, row]
end

puts
puts "passed: #{total_passed} failed: #{total_failed}"

$, = old_comma

File.open "#{dir}/index.html", 'w' do |f|
  f.puts Tagz {
    tagz.puts %(<!D\OCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">)
    html_ {
      head_ {
        title_ { "Project Status Report #{Time.now.strftime("%Y-%m-%d %H:%M")}"}
        style_(:type=>"text/css") {
          tagz << "*         { padding: 0; margin: 0; }"
          tagz << "table     { margin: 0 auto; padding: 0; border-spacing: 0; }"
          tagz << "th, td    { text-align: right; font-size:0.7em; width: 1em;}"
          tagz << "th        { font-weight: normal; }"
          tagz << "p         { text-align: center; }"
          tagz << "tr#top th { vertical-align: bottom; text-align: left;
                               height: 7em; }"
          tagz << ".rot      { -webkit-transform: rotate(-90deg);
                               -webkit-transform-origin: bottom;
                               position:absolute;
                               margin-top: -6em;
                               margin-left: -4em;
                               width: 10em;
                               line-height: 0em; }"
        }
      }
      body_ {
        table_ {
          tr_(:id => :top) {
            td_ {
              table_(:style => "border: 1px solid black; padding: 2px;") {
                tr_ { td_ "Packages:"; td_ projs.size }
                tr_ { td_ "Releases:"; td_ Dir["*/[0-9]*"].size }
                tr_ { td_ "Commits:";  td_ `p4 counter change` }
              }
            }
            th_ { tagz.concat "&nbsp;" }
            th_ { div_ "released?", :class => :rot }
            th_ { tagz.concat "&nbsp;" }
            versions.each do |v|
              th_ { div_ v, :class => :rot }
            end
          }
          projs.each do |proj|
            results = status[proj]
            tr_ {
              th_ {
                a_(proj, :href => "#{proj}.txt")
              }

              td_ { tagz.concat "&nbsp;" }

              up_to_date = check_project(proj)
              td_("", :style => "background: #{color[up_to_date]}")

              td_ { tagz.concat "&nbsp;" }

              versions.each do |version|
                r = results[version] || "failed"
                r = "passed" if r == true
                td_("", :style => "background: #{color[r]}")
              end
            }
          end
        }
      }
    }
  }
end
